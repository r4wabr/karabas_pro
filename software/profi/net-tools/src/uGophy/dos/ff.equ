FF_JP_TABLE		EQU 0xC000
FF_MOUNT		EQU	FF_JP_TABLE		;FRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);			/* Mount/Unmount a logical drive */
FF_OPEN			EQU	FF_JP_TABLE+3	;FRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);			/* Open or create a file */
FF_UNLINK		EQU	FF_JP_TABLE+6	;FRESULT f_unlink (const TCHAR* path);								/* Delete an existing file or directory */
FF_READ			EQU	FF_JP_TABLE+9	;FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);			/* Read data from a file */
FF_LSEEK		EQU	FF_JP_TABLE+12	;FRESULT f_lseek (FIL* fp, DWORD ofs);								/* Move file pointer of a file object */
FF_WRITE		EQU	FF_JP_TABLE+15	;FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);	/* Write data to a file */
FF_SYNC			EQU	FF_JP_TABLE+18	;FRESULT f_sync (FIL* fp);											/* Flush cached data of a writing file */
FF_CHDIR		EQU	FF_JP_TABLE+21	;FRESULT f_chdir (const TCHAR* path);								/* Change current directory */
FF_READDIR		EQU	FF_JP_TABLE+24	;FRESULT f_readdir (DIR* dp, FILINFO* fno);							/* Read a directory item */
FF_OPENDIR		EQU	FF_JP_TABLE+27	;FRESULT f_opendir (DIR* dp, const TCHAR* path);					/* Open a directory */
FF_CLOSE		EQU	FF_JP_TABLE+30	;FRESULT f_close (FIL* fp);											/* Close an open file object */
FF_MKDIR		EQU	FF_JP_TABLE+33	;FRESULT f_mkdir (const TCHAR* path);								/* Create a sub directory */
FF_RENAME		EQU	FF_JP_TABLE+36	;FRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);	/* Rename/Move a file or directory */
FF_GETCWD		EQU	FF_JP_TABLE+39	;FRESULT f_getcwd (TCHAR* buff, UINT len);							/* Get current directory */
FF_FILSTATE		EQU	FF_JP_TABLE+42	;DWORD 	 f_filstate(FIL* fp, BYTE mode);								/* Get a file status FP_EOF=1, FP_ERR=2, FP_TELL=3, FP_SIZE=4 */
DRV_INIT		EQU	FF_JP_TABLE+45	;DSTATUS disk_initialize (unsigned char pdrv);
DRV_READ		EQU	FF_JP_TABLE+48	;DRESULT _disk_read (unsigned long sector, unsigned char count, unsigned char* buff, unsigned char pdrv);
DRV_WRITE		EQU	FF_JP_TABLE+51	;DRESULT _disk_write (unsigned long sector, unsigned char count, const unsigned char* buff, unsigned char pdrv);
;Библиотека юзает 16байт ОЗУ с адреса 0х7000,
;Этот адрес можно изменить, смотри строку:
;-Z(DATA)DATA0,IDATA0,UDATA0,ECSTR,TEMP=7000-700F
;в файле lnkz80.xcl
;сама либа скомпилена с адреся 0х0000
;--------------------------------------------------
;Подробную информацию по функциям смотри на сайте Эльм Чана
;параметры в функции передаются в следующем виде(из доки ИАРа):
;первый параметр в DE(DWORD в BCDE), второй в ВС, остальные на стеке. На стек помещать параметры в обратном порядке.
;Незабываем, после вызова, снимать параметры со стека(если они там больше не понадобятся).
;Пример вызова функции f(p1,p2,p3,p4), при условии что параметры не длиннее word'а:
;	ld hl,p4
;	push hl
;	ld hl,p3
;	push hl
;	ld bc,p2
;	ld de,p1
;	call f
;	pop hl
;	pop hl
;8битный параметр загружается в младший регистр.
;Результат возвращается из функции: 8битный в регистре А, 16битный в HL, 32битный в BCHL
;отдельно рассмотрим функцию FF_LSEEK(FIL* fp, DWORD ofs):
;	ld hl,highword(ofs)
;	push hl
;	ld hl,lowword(ofs)
;	push hl
;	ld de,fp
;	call FF_LSEEK
;----------------------------------------------------------------------

;Флаги передаваемые при открытии файла:
FA_READ				equ	0x01	;Specifies read access to the object. Data can be read from the file.
					;Combine with FA_WRITE for read-write access.
FA_WRITE			equ	0x02	;Specifies write access to the object. Data can be written to the file.
					;Combine with FA_READ for read-write access.
FA_OPEN_EXISTING	equ	0x00	;Opens the file. The function fails if the file is not existing. (Default)
FA_OPEN_ALWAYS		equ	0x10	;Opens the file if it is existing. If not, a new file is created.
					;To append data to the file, use f_lseek function after file open in this method.
FA_CREATE_NEW		equ	0x04	;Creates a new file. The function fails with FR_EXIST if the file is existing.
FA_CREATE_ALWAYS	equ	0x08	;Creates a new file. If the file is existing, it is truncated and overwritten.

; /* File function return code (FRESULT) */
	; FR_OK = 0,				/* (0) Succeeded */
	; FR_DISK_ERR,			/* (1) A hard error occured in the low level disk I/O layer */
	; FR_INT_ERR,				/* (2) Assertion failed */
	; FR_NOT_READY,			/* (3) The physical drive cannot work */
	; FR_NO_FILE,				/* (4) Could not find the file */
	; FR_NO_PATH,				/* (5) Could not find the path */
	; FR_INVALID_NAME,		/* (6) The path name format is invalid */
	; FR_DENIED,				/* (7) Acces denied due to prohibited access or directory full */
	; FR_EXIST,				/* (8) Acces denied due to prohibited access */
	; FR_INVALID_OBJECT,		/* (9) The file/directory object is invalid */
	; FR_WRITE_PROTECTED,		/* (10) The physical drive is write protected */
	; FR_INVALID_DRIVE,		/* (11) The logical drive number is invalid */
	; FR_NOT_ENABLED,			/* (12) The volume has no work area */
	; FR_NO_FILESYSTEM,		/* (13) There is no valid FAT volume on the physical drive */
	; FR_MKFS_ABORTED,		/* (14) The f_mkfs() aborted due to any parameter error */
	; FR_TIMEOUT,				/* (15) Could not get a grant to access the volume within defined period */
	; FR_LOCKED,				/* (16) The operation is rejected according to the file shareing policy */
	; FR_NOT_ENOUGH_CORE,		/* (17) LFN working buffer could not be allocated */
	; FR_TOO_MANY_OPEN_FILES	/* (18) Number of open files > _FS_SHARE */
	
FATFS_SIZE		equ	562
FIL_SIZE		equ	32
DIR_SIZE		equ	26

	STRUCT FILINFO
fsize	dword		;/* file size */
fdate	word		;/* last modified date */
ftime	word		;/* last modified time */
fattrib	byte		;/* attribute */
fname	defs 26		;/* short file name (8.3 format) */
	ENDS

;/* File attribute bits for directory entry */
AM_RDO	=0x01	;/* Read only */
AM_HID	=0x02	;/* Hidden */
AM_SYS	=0x04	;/* System */
AM_VOL	=0x08	;/* Volume label */
AM_LFN	=0x0F	;/* LFN entry */
AM_DIR	=0x10	;/* Directory */
AM_ARC	=0x20	;/* Archive */
AM_MASK	=0x3F	;/* Mask of defined bits */